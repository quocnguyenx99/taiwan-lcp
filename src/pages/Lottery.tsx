import React, { useEffect, useRef, useState } from "react";
import io from "socket.io-client";

import lcpIcon from "../assets/lcpIcon.png";
import "../styles/lottery.css";

import groupPrize1 from "../assets/groupPrize1.png";
import boardPrize2 from "../assets/boardPrize2.png";

import groupPrize2 from "../assets/groupPrize2.png";
import groupPrize3 from "../assets/groupPrize3.png";
import lookupImage from "../assets/lookupImage.png";
import Header from "../components/Header";
import Countdown from "../components/Countdown";

interface Winner {
  number_phone: string;
  full_name: string;
}

interface PrizeData {
  id: number;
  title: string;
  description: string;
  picture: string | null;
  status: number;
  type: number;
  members: Array<{
    id: number;
    full_name: string;
    number_phone: string;
    email: string;
    address: string;
    created_at: string;
    team_id: number;
    team_vote: {
      id: number;
      name: string;
    };
  }>;
}

interface ApiResponse {
  status: boolean;
  errorCode: number;
  message: string;
  data: PrizeData[];
}

const Lottery: React.FC<{ campaignId?: string }> = ({ campaignId }) => {
  const activeCampaignId = campaignId || "taiwan-lcp";

  // Gi·∫£i nh·∫•t (1 ng∆∞·ªùi)
  const [firstDigits, setFirstDigits] = useState<(number | string)[]>(
    Array(10).fill(0)
  );
  const firstSpinningRef = useRef(false);
  const [firstWinner, setFirstWinner] = useState<Winner | null>(null);

  // Gi·∫£i nh√¨ (3 ng∆∞·ªùi) - thay ƒë·ªïi state ƒë·ªÉ x·ª≠ l√Ω t·ª´ng gi·∫£i ri√™ng
  const [secondDigits, setSecondDigits] = useState<(number | string)[][]>(
    Array.from({ length: 3 }, () => Array(10).fill(0))
  );
  const [secondSpinningStates, setSecondSpinningStates] = useState<boolean[]>([
    false,
    false,
    false,
  ]);
  const [secondWinners, setSecondWinners] = useState<Winner[]>([]);

  // Gi·∫£i 3‚Äì5 (ch·ªâ render b·∫£ng)
  const [backpackList, setBackpackList] = useState<Winner[]>([]); // prizeId = 3
  const [bottleList, setBottleList] = useState<Winner[]>([]); // prizeId = 4
  const [bagList, setBagList] = useState<Winner[]>([]); // prizeId = 5

  // State cho s·ªë l∆∞·ª£ng record hi·ªÉn th·ªã c·ªßa t·ª´ng gi·∫£i
  const [backpackVisible, setBackpackVisible] = useState(10);
  const [isBackpackExpanded, setIsBackpackExpanded] = useState(false);

  const [bottleVisible, setBottleVisible] = useState(10);
  const [isBottleExpanded, setIsBottleExpanded] = useState(false);

  const [bagVisible, setBagVisible] = useState(10);
  const [isBagExpanded, setIsBagExpanded] = useState(false);

  // Th√™m state cho tra c·ª©u
  const [searchPhone, setSearchPhone] = useState("");
  const [searchResult, setSearchResult] = useState<{
    found: boolean;
    message: string;
    winner?: Winner & { prize_id: number; prize: string };
  } | null>(null);
  const [isSearching, setIsSearching] = useState(false);

  // State ƒë·ªÉ l∆∞u danh s√°ch g·ªëc (kh√¥ng b·ªã filter)
  const [originalBackpackList, setOriginalBackpackList] = useState<Winner[]>(
    []
  );
  const [originalBottleList, setOriginalBottleList] = useState<Winner[]>([]);
  const [originalBagList, setOriginalBagList] = useState<Winner[]>([]);

  // State ƒë·ªÉ ki·ªÉm so√°t hi·ªÉn th·ªã countdown
  const [showCountdown, setShowCountdown] = useState(true);

  // Th√™m state ƒë·ªÉ track loading
  const [isLoadingInitialData, setIsLoadingInitialData] = useState(true);

  // Th√™m states cho animation table
  const [backpackAnimatedRows, setBackpackAnimatedRows] = useState(0);
  const [bottleAnimatedRows, setBottleAnimatedRows] = useState(0);
  const [bagAnimatedRows, setBagAnimatedRows] = useState(0);
  const [isAnimatingBackpack, setIsAnimatingBackpack] = useState(false);
  const [isAnimatingBottle, setIsAnimatingBottle] = useState(false);
  const [isAnimatingBag, setIsAnimatingBag] = useState(false);

  // Refs ƒë·ªÉ clear timeout khi c·∫ßn
  const backpackAnimationRef = useRef<ReturnType<typeof setTimeout>[]>([]);
  const bottleAnimationRef = useRef<ReturnType<typeof setTimeout>[]>([]);
  const bagAnimationRef = useRef<ReturnType<typeof setTimeout>[]>([]);

  // H√†m helper ƒë·ªÉ convert phone number th√†nh digit array
  const processPhoneToDigits = (phoneStr: string): (number | string)[] => {
    const cleanPhone = phoneStr.padStart(10, "0").slice(0, 10);
    return cleanPhone.split("").map((char) => {
      if (char === "X" || char === "x") {
        return "X";
      }
      const num = Number(char);
      return isNaN(num) ? "X" : num;
    });
  };

  // H√†m toggle cho t·ª´ng gi·∫£i
  const handleToggleBackpack = () => {
    if (isBackpackExpanded) {
      setBackpackVisible(10);
      setIsBackpackExpanded(false);
      setBackpackAnimatedRows(10); // Hi·ªÉn th·ªã 10 rows khi thu g·ªçn
      setIsAnimatingBackpack(false);
      setTimeout(() => {
        const table = document.querySelector(".backpack-prize");
        if (table) {
          const headerHeight = 110;
          const tablePosition =
            table.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({
            top: tablePosition - headerHeight,
            behavior: "smooth",
          });
        }
      }, 100);
    } else {
      setBackpackVisible(backpackList.length);
      setIsBackpackExpanded(true);
      setBackpackAnimatedRows(backpackList.length); // Hi·ªÉn th·ªã t·∫•t c·∫£ ngay l·∫≠p t·ª©c
      setIsAnimatingBackpack(false);
    }
  };

  const handleToggleBottle = () => {
    if (isBottleExpanded) {
      setBottleVisible(10);
      setIsBottleExpanded(false);
      setBottleAnimatedRows(10);
      setIsAnimatingBottle(false);
      setTimeout(() => {
        const table = document.querySelector(".bottle-prize");
        if (table) {
          const headerHeight = 110;
          const tablePosition =
            table.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({
            top: tablePosition - headerHeight,
            behavior: "smooth",
          });
        }
      }, 100);
    } else {
      setBottleVisible(bottleList.length);
      setIsBottleExpanded(true);
      setBottleAnimatedRows(bottleList.length);
      setIsAnimatingBottle(false);
    }
  };

  const handleToggleBag = () => {
    if (isBagExpanded) {
      setBagVisible(10);
      setIsBagExpanded(false);
      setBagAnimatedRows(10);
      setIsAnimatingBag(false);
      setTimeout(() => {
        const table = document.querySelector(".bag-prize");
        if (table) {
          const headerHeight = 110;
          const tablePosition =
            table.getBoundingClientRect().top + window.scrollY;
          window.scrollTo({
            top: tablePosition - headerHeight,
            behavior: "smooth",
          });
        }
      }, 100);
    } else {
      setBagVisible(bagList.length);
      setIsBagExpanded(true);
      setBagAnimatedRows(bagList.length);
      setIsAnimatingBag(false);
    }
  };

  // H√†m tra c·ª©u s·ªë ƒëi·ªán tho·∫°i
  const handleSearch = async () => {
    // N·∫øu input tr·ªëng, reset v·ªÅ danh s√°ch g·ªëc
    if (!searchPhone.trim()) {
      setSearchResult(null);
      setBackpackList(originalBackpackList);
      setBackpackVisible(10);
      setIsBackpackExpanded(false);

      setBottleList(originalBottleList);
      setBottleVisible(10);
      setIsBottleExpanded(false);

      setBagList(originalBagList);
      setBagVisible(10);
      setIsBagExpanded(false);
      return;
    }

    setIsSearching(true);
    try {
      const response = await fetch(
        "https://be.dudoanchungketlcp-tta.vn/api/prize/search",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            phone: searchPhone.trim(),
          }),
        }
      );

      const result = await response.json();

      if (result.status && result.data) {
        // Tr√∫ng gi·∫£i - ch·ªâ hi·ªÉn th·ªã 1 record trong b·∫£ng t∆∞∆°ng ·ª©ng
        setSearchResult({
          found: true,
          message: "üèÜ CH√öC M·ª™NG B·∫†N N·∫∞M TRONG DANH S√ÅCH TR√öNG GI·∫¢I.",
          winner: result.data,
        });

        // Filter b·∫£ng t∆∞∆°ng ·ª©ng ch·ªâ hi·ªÉn th·ªã 1 record
        const winnerRecord = {
          number_phone: result.data.number_phone,
          full_name: result.data.full_name,
        };

        // ‚úÖ GI·∫¢I NH·∫§T (prizeId = 1)
        if (result.data.prize_id === 1) {
          // Scroll xu·ªëng section gi·∫£i nh·∫•t sau khi render
          setTimeout(() => {
            const section = document.querySelector(".search-first-prize");
            if (section) {
              const headerHeight = 110;
              const sectionPosition =
                section.getBoundingClientRect().top + window.scrollY;
              window.scrollTo({
                top: sectionPosition - headerHeight,
                behavior: "smooth",
              });
            }
          }, 100);
        }
        // ‚úÖ GI·∫¢I NH√å (prizeId = 2) 
        else if (result.data.prize_id === 2) {
          // Scroll xu·ªëng section gi·∫£i nh√¨ sau khi render
          setTimeout(() => {
            const section = document.querySelector(".search-second-prize");
            if (section) {
              const headerHeight = 110;
              const sectionPosition =
                section.getBoundingClientRect().top + window.scrollY;
              window.scrollTo({
                top: sectionPosition - headerHeight,
                behavior: "smooth",
              });
            }
          }, 100);
        }
        // GI·∫¢I BA - BALO (prizeId = 3)
        else if (result.data.prize_id === 3) {
          setBackpackList([winnerRecord]);
          setBackpackVisible(1);
          setIsBackpackExpanded(false);
          setBackpackAnimatedRows(1); // ‚úÖ Hi·ªÉn th·ªã ngay 1 row
          setTimeout(() => {
            const table = document.querySelector(".backpack-prize");
            if (table) {
              const headerHeight = 110;
              const tablePosition =
                table.getBoundingClientRect().top + window.scrollY;
              window.scrollTo({
                top: tablePosition - headerHeight,
                behavior: "smooth",
              });
            }
          }, 100);
        } 
        // GI·∫¢I BA - B√åNH N∆Ø·ªöC (prizeId = 4)
        else if (result.data.prize_id === 4) {
          setBottleList([winnerRecord]);
          setBottleVisible(1);
          setIsBottleExpanded(false);
          setBottleAnimatedRows(1); // ‚úÖ Hi·ªÉn th·ªã ngay 1 row
          setTimeout(() => {
            const table = document.querySelector(".bottle-prize");
            if (table) {
              const headerHeight = 110;
              const tablePosition =
                table.getBoundingClientRect().top + window.scrollY;
              window.scrollTo({
                top: tablePosition - headerHeight,
                behavior: "smooth",
              });
            }
          }, 100);
        } 
        // GI·∫¢I BA - T√öI X·∫æP (prizeId = 5)
        else if (result.data.prize_id === 5) {
          setBagList([winnerRecord]);
          setBagVisible(1);
          setIsBagExpanded(false);
          setBagAnimatedRows(1); // ‚úÖ Hi·ªÉn th·ªã ngay 1 row
          setTimeout(() => {
            const table = document.querySelector(".bag-prize");
            if (table) {
              const headerHeight = 110;
              const tablePosition =
                table.getBoundingClientRect().top + window.scrollY;
              window.scrollTo({
                top: tablePosition - headerHeight,
                behavior: "smooth",
              });
            }
          }, 100);
        }
      } else {
        // Kh√¥ng tr√∫ng gi·∫£i - kh√¥i ph·ª•c l·∫°i danh s√°ch g·ªëc
        setSearchResult({
          found: false,
          message: "B·∫†N KH√îNG N·∫∞M TRONG DANH S√ÅCH TR√öNG GI·∫¢I.",
        });

        // Kh√¥i ph·ª•c l·∫°i danh s√°ch g·ªëc
        setBackpackList(originalBackpackList);
        setBackpackVisible(10);
        setIsBackpackExpanded(false);
        setBackpackAnimatedRows(Math.min(originalBackpackList.length, 10));

        setBottleList(originalBottleList);
        setBottleVisible(10);
        setIsBottleExpanded(false);
        setBottleAnimatedRows(Math.min(originalBottleList.length, 10));

        setBagList(originalBagList);
        setBagVisible(10);
        setIsBagExpanded(false);
        setBagAnimatedRows(Math.min(originalBagList.length, 10));
      }
    } catch (error) {
      console.error("Error searching:", error);
      setSearchResult({
        found: false,
        message: "C√ì L·ªñI X·∫¢Y RA KHI TRA C·ª®U.",
      });
    } finally {
      setIsSearching(false);
    }
  };

  // H√†m scroll ƒë·∫øn section t∆∞∆°ng ·ª©ng
  const scrollToSection = (sectionClass: string, delay = 1000) => {
    setTimeout(() => {
      const section = document.querySelector(sectionClass);
      if (section) {
        const headerHeight = 110; // Chi·ªÅu cao header
        const sectionPosition =
          section.getBoundingClientRect().top + window.scrollY;
        window.scrollTo({
          top: sectionPosition - headerHeight,
          behavior: "smooth",
        });
      }
    }, delay);
  };

  // Fetch initial data khi component mount

  useEffect(() => {
    const fetchInitialResults = async () => {
      try {
        setIsLoadingInitialData(true);

        const response = await fetch(
          "https://be.dudoanchungketlcp-tta.vn/api/prize/get-member"
        );

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result: ApiResponse = await response.json();

        if (result.status && result.data) {
          console.log("‚úÖ Initial data loaded:", result.data);

          result.data.forEach((prize) => {
            const { id, type, members } = prize; // ‚úÖ Th√™m id v√†o destructuring

            if (!members || members.length === 0) {
              console.log(
                `‚è≠Ô∏è No members found for prize id: ${id}, type: ${type}`
              );
              return;
            }

            switch (type) {
              case 1: // Gi·∫£i nh·∫•t
                if (members.length > 0) {
                  const winner = members[0];
                  const digits = processPhoneToDigits(winner.number_phone);
                  setFirstDigits(digits);
                  setFirstWinner({
                    number_phone: winner.number_phone,
                    full_name: winner.full_name,
                  });
                 
                }
                break;

              case 2: // Gi·∫£i nh√¨ (c√≥ th·ªÉ c√≥ nhi·ªÅu ng∆∞·ªùi)
                if (members.length > 0) {
                  const newSecondDigits = Array.from({ length: 3 }, () =>
                    Array(10).fill(0)
                  );
                  const newSecondWinners: Winner[] = [];

                  members.slice(0, 3).forEach((member, idx) => {
                    const digits = processPhoneToDigits(member.number_phone);
                    newSecondDigits[idx] = digits;
                    newSecondWinners[idx] = {
                      number_phone: member.number_phone,
                      full_name: member.full_name,
                    };
                  });

                  setSecondDigits(newSecondDigits);
                  setSecondWinners(newSecondWinners);
                  
                }
                break;

              case 3: // Gi·∫£i ba - c·∫ßn check th√™m id ƒë·ªÉ ph√¢n bi·ªát
                if (id === 3) {
                  // ‚úÖ Balo du l·ªãch (id = 3)
                  const backpackWinners = members.map((m) => ({
                    number_phone: m.number_phone,
                    full_name: m.full_name,
                  }));
                  setOriginalBackpackList(backpackWinners);
                  setBackpackList(backpackWinners);
                  setBackpackAnimatedRows(Math.min(backpackWinners.length, 10));
                  setIsAnimatingBackpack(false);
                  
                } else if (id === 4) {
                  // ‚úÖ B√¨nh n∆∞·ªõc (id = 4)
                  const bottleWinners = members.map((m) => ({
                    number_phone: m.number_phone,
                    full_name: m.full_name,
                  }));
                  setOriginalBottleList(bottleWinners);
                  setBottleList(bottleWinners);
                  setBottleAnimatedRows(Math.min(bottleWinners.length, 10));
                  setIsAnimatingBottle(false);
                 
                } else if (id === 5) {
                  // ‚úÖ T√∫i x·∫øp (id = 5)
                  const bagWinners = members.map((m) => ({
                    number_phone: m.number_phone,
                    full_name: m.full_name,
                  }));
                  setOriginalBagList(bagWinners);
                  setBagList(bagWinners);
                  setBagAnimatedRows(Math.min(bagWinners.length, 10));
                  setIsAnimatingBag(false);
                  
                }
                break;

              default:
                console.log(`‚ùì Unknown prize type: ${type}, id: ${id}`);
            }
          });
        } else {
          console.log("‚ö†Ô∏è No initial data available or API returned error");
        }
      } catch (error) {
        console.error("‚ùå Error fetching initial results:", error);
      } finally {
        setIsLoadingInitialData(false);
      }
    };

    fetchInitialResults();
  }, []);

  // Socket / timer
  const spinIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null);
  const stopTimeoutsRef = useRef<ReturnType<typeof setTimeout>[]>([]);
  const socketRef = useRef<any | null>(null);

  useEffect(() => {
    const socket = io("https://sk.dudoanchungketlcp-tta.vn", {
      transports: ["websocket"],
    });
    socketRef.current = socket;

    socket.emit("join", { campaignId: activeCampaignId });

    // === H√ÄM QUAY GI·∫¢I NH·∫§T ===
    const startFirstSpin = () => {
      if (spinIntervalRef.current) clearInterval(spinIntervalRef.current);
      stopTimeoutsRef.current.forEach(clearTimeout);
      stopTimeoutsRef.current = [];
      firstSpinningRef.current = true;
      setFirstWinner(null);
      spinIntervalRef.current = setInterval(() => {
        setFirstDigits(
          Array.from({ length: 10 }, () => Math.floor(Math.random() * 10))
        );
      }, 80);
    };

    // === H√ÄM QUAY GI·∫¢I NH√å THEO INDEX ===
    const startSecondSpin = (prizeIndex: number) => {
     

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i spinning cho gi·∫£i c·ª• th·ªÉ
      setSecondSpinningStates((prev) => {
        const newStates = [...prev];
        newStates[prizeIndex] = true;
        return newStates;
      });

      // Clear interval c≈© n·∫øu c√≥
      if (spinIntervalRef.current) {
        clearInterval(spinIntervalRef.current);
        spinIntervalRef.current = null;
      }

      // T·∫°o interval ri√™ng cho gi·∫£i n√†y
      const spinInterval = setInterval(() => {
        setSecondDigits((prev) => {
          const newDigits = prev.map((arr, idx) => {
            // Ch·ªâ quay animation cho gi·∫£i ƒëang ƒë∆∞·ª£c ch·ªçn
            if (idx === prizeIndex) {
              return Array.from({ length: 10 }, () =>
                Math.floor(Math.random() * 10)
              );
            }
            return arr; // Gi·ªØ nguy√™n c√°c gi·∫£i kh√°c
          });
          return newDigits;
        });
      }, 80);

      // L∆∞u interval n√†y ƒë·ªÉ c√≥ th·ªÉ clear sau
      spinIntervalRef.current = spinInterval;
    };

    // === STOP SPIN: x·ª≠ l√Ω t·ª´ng gi·∫£i ri√™ng bi·ªát ===
    const stopSpin = (payload: any) => {
      console.log("üéØ STOP SPIN PAYLOAD:", payload);
      const prizeId: number = payload?.prizeId;
      const results: Winner[] = payload?.result || [];
      if (!Array.isArray(results) || results.length === 0) return;

      // clear v√≤ng quay hi·ªán t·∫°i (n·∫øu c√≥)
      if (spinIntervalRef.current) {
        clearInterval(spinIntervalRef.current);
        spinIntervalRef.current = null;
      }
      stopTimeoutsRef.current.forEach(clearTimeout);
      stopTimeoutsRef.current = [];

      // H√†m helper ƒë·ªÉ x·ª≠ l√Ω number_phone c√≥ ch·ª©a XXXX
      const processPhoneDisplay = (phoneStr: string) => {
        const cleanPhone = phoneStr.padStart(10, "0").slice(0, 10);
        return cleanPhone.split("").map((char) => {
          if (char === "X" || char === "x") {
            return "X"; // Gi·ªØ nguy√™n X
          }
          const num = Number(char);
          return isNaN(num) ? "X" : num; // N·∫øu kh√¥ng ph·∫£i s·ªë th√¨ hi·ªÉn th·ªã X
        });
      };

      // Gi·∫£i 1: reveal 1 ng∆∞·ªùi, c√≥ animation "gi·∫£m t·ªëc"
      if (prizeId === 1) {
        firstSpinningRef.current = false;
        const first = results[0];
        const displayArray = processPhoneDisplay(String(first.number_phone));

        for (let i = 0; i < 10; i++) {
          const t = setTimeout(() => {
            if (i < 9) {
              setFirstDigits(
                Array.from({ length: 10 }, () => Math.floor(Math.random() * 10))
              );
            } else {
              setFirstDigits(displayArray);
              setFirstWinner(first);
              // Sau khi ho√†n th√†nh gi·∫£i 1, scroll xu·ªëng gi·∫£i 2
              scrollToSection(".second-prize", 2000);
            }
          }, 120 + i * 120);
          stopTimeoutsRef.current.push(t);
        }
      }

      // Gi·∫£i 2: x·ª≠ l√Ω t·ª´ng gi·∫£i Nh√¨ ri√™ng bi·ªát (21, 22, 23)
      if (prizeId >= 21 && prizeId <= 23) {
        const prizeIndex = prizeId - 21; // 21->0, 22->1, 23->2
        const winner = results[0]; // M·ªói l·∫ßn ch·ªâ nh·∫≠n 1 ng∆∞·ªùi

        console.log(
          `üèÜ Stopping spin for second prize ${
            prizeIndex + 1
          } (prizeId: ${prizeId})`
        );

        // D·ª´ng animation cho gi·∫£i n√†y
        setSecondSpinningStates((prev) => {
          const newStates = [...prev];
          newStates[prizeIndex] = false;
          return newStates;
        });

        // Animation gi·∫£m t·ªëc cho gi·∫£i n√†y
        const displayArray = processPhoneDisplay(String(winner.number_phone));

        for (let i = 0; i < 8; i++) {
          const t = setTimeout(() => {
            if (i < 7) {
              setSecondDigits((prev) => {
                const newDigits = prev.map((arr, idx) => {
                  if (idx === prizeIndex) {
                    return Array.from({ length: 10 }, () =>
                      Math.floor(Math.random() * 10)
                    );
                  }
                  return arr;
                });
                return newDigits;
              });
            } else {
              // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
              setSecondDigits((prev) => {
                const newDigits = prev.map((arr, idx) => {
                  if (idx === prizeIndex) {
                    return displayArray;
                  }
                  return arr;
                });
                return newDigits;
              });

              // C·∫≠p nh·∫≠t danh s√°ch winners
              setSecondWinners((prev) => {
                const newWinners = [...prev];
                newWinners[prizeIndex] = winner;
                return newWinners;
              });

              // N·∫øu ƒë√¢y l√† gi·∫£i cu·ªëi c√πng (prizeId 23), scroll xu·ªëng gi·∫£i 3
              if (prizeId === 23) {
                scrollToSection(".third-prize", 2000);
              }
            }
          }, 100 + i * 150); // Animation gi·∫£m t·ªëc
          stopTimeoutsRef.current.push(t);
        }
      }

      // Gi·∫£i 3‚Äì5: render b·∫£ng v·ªõi animation CH·ªà KHI SOCKET QUAY
      if (prizeId === 3) {
        setOriginalBackpackList(results);
        setBackpackList(results);
        setBackpackVisible(10);
        setIsBackpackExpanded(false);

        // ‚úÖ CH·ªà ANIMATION KHI NH·∫¨N T·ª™ SOCKET (kh√¥ng ph·∫£i initial data)
        setBackpackAnimatedRows(0);
        setIsAnimatingBackpack(false);

        // B·∫Øt ƒë·∫ßu animation sau 800ms
        setTimeout(() => {
          animateTableRows("backpack", results.length, 200);
        }, 800);

        scrollToSection(".backpack-prize", 500);
      }

      if (prizeId === 4) {
        setOriginalBottleList(results);
        setBottleList(results);
        setBottleVisible(10);
        setIsBottleExpanded(false);

        // ‚úÖ CH·ªà ANIMATION KHI NH·∫¨N T·ª™ SOCKET
        setBottleAnimatedRows(0);
        setIsAnimatingBottle(false);

        setTimeout(() => {
          animateTableRows("bottle", results.length, 200);
        }, 800);

        scrollToSection(".bottle-prize", 500);
      }

      if (prizeId === 5) {
        setOriginalBagList(results);
        setBagList(results);
        setBagVisible(10);
        setIsBagExpanded(false);

        // ‚úÖ CH·ªà ANIMATION KHI NH·∫¨N T·ª™ SOCKET
        setBagAnimatedRows(0);
        setIsAnimatingBag(false);

        setTimeout(() => {
          animateTableRows("bag", results.length, 200);
        }, 800);

        scrollToSection(".bag-prize", 500);
      }
    };

    // === H√ÄM ANIMATE TABLE ROWS ===
    const animateTableRows = (
      prizeType: "backpack" | "bottle" | "bag",
      totalRows: number,
      delayBetweenRows = 200
    ) => {
      const maxRowsToShow = Math.min(totalRows, 10);

      let animationRef: React.MutableRefObject<ReturnType<typeof setTimeout>[]>;
      let setAnimatedRows: React.Dispatch<React.SetStateAction<number>>;
      let setIsAnimating: React.Dispatch<React.SetStateAction<boolean>>;

      switch (prizeType) {
        case "backpack":
          animationRef = backpackAnimationRef;
          setAnimatedRows = setBackpackAnimatedRows;
          setIsAnimating = setIsAnimatingBackpack;
          break;
        case "bottle":
          animationRef = bottleAnimationRef;
          setAnimatedRows = setBottleAnimatedRows;
          setIsAnimating = setIsAnimatingBottle;
          break;
        case "bag":
          animationRef = bagAnimationRef;
          setAnimatedRows = setBagAnimatedRows;
          setIsAnimating = setIsAnimatingBag;
          break;
      }

      // Clear previous timeouts
      animationRef.current.forEach(clearTimeout);
      animationRef.current = [];

      // Reset v√† b·∫Øt ƒë·∫ßu animation
      setAnimatedRows(0);
      setIsAnimating(true);


      // Animate t·ª´ng row
      for (let i = 0; i < maxRowsToShow; i++) {
        const timeout = setTimeout(() => {
          setAnimatedRows(i + 1);

          // Khi ho√†n th√†nh animation cu·ªëi c√πng
          if (i === maxRowsToShow - 1) {
            setIsAnimating(false);
          }
        }, i * delayBetweenRows);

        animationRef.current.push(timeout);
      }
    };

    // L·∫Øng nghe start-spin ƒë·ªÉ kh·ªüi ƒë·ªông animation ƒë√∫ng gi·∫£i
    socket.on("start-spin", (p: any) => {
      console.log("üì° start-spin:", p);
      if (p?.campaignId && p.campaignId !== activeCampaignId) return;

      if (p?.prizeId === 1 && !firstSpinningRef.current) {
        console.log("üé∞ Starting first prize spin");
        startFirstSpin();
      }

      // X·ª≠ l√Ω c√°c gi·∫£i Nh√¨ ri√™ng bi·ªát
      if (p?.prizeId >= 21 && p?.prizeId <= 23) {
        const prizeIndex = p.prizeId - 21;
        console.log(
          `üì° Received start-spin for second prize ${
            prizeIndex + 1
          } (prizeId: ${p.prizeId})`
        );

        // L·∫•y current state thay v√¨ d·ª±a v√†o stale closure
        setSecondSpinningStates((currentStates) => {
          console.log(`üì° Current spinning states:`, currentStates);
          if (!currentStates[prizeIndex]) {
            console.log(`üì° Starting spin for prize index ${prizeIndex}`);
            // Call startSecondSpin trong microtask ƒë·ªÉ ƒë·∫£m b·∫£o state ƒë√£ update
            setTimeout(() => startSecondSpin(prizeIndex), 0);
          } else {
            console.log(`üì° Prize index ${prizeIndex} is already spinning`);
          }
          return currentStates; // Kh√¥ng thay ƒë·ªïi state ·ªü ƒë√¢y
        });
      }
    });

    // L·∫Øng nghe stop-spin ƒë·ªÉ d·ª´ng v√† show k·∫øt qu·∫£
    socket.on("stop-spin", (p: any) => {
      console.log("üì° stop-spin:", p);
      if (p?.campaignId && p.campaignId !== activeCampaignId) return;
      stopSpin(p);
    });

    return () => {
      socket.off("start-spin");
      socket.off("stop-spin");
      if (spinIntervalRef.current) clearInterval(spinIntervalRef.current);
      stopTimeoutsRef.current.forEach(clearTimeout);
      stopTimeoutsRef.current = [];
      socket.disconnect();
      socketRef.current = null;
    };
  }, [activeCampaignId]); // B·ªé secondSpinningStates kh·ªèi dependency array

  // Cleanup animation timeouts khi component unmount
  useEffect(() => {
    return () => {
      backpackAnimationRef.current.forEach(clearTimeout);
      bottleAnimationRef.current.forEach(clearTimeout);
      bagAnimationRef.current.forEach(clearTimeout);
    };
  }, []);

  // Callback khi countdown h·∫øt th·ªùi gian
  const handleCountdownExpired = () => {
    setShowCountdown(false);
  };

  // Hi·ªÉn th·ªã loading state khi ƒëang fetch data ban ƒë·∫ßu
  if (isLoadingInitialData) {
    return (
      <div>
        <Header />
        <div
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            height: "50vh",
            fontSize: "18px",
            color: "white",
          }}
        >
          <div>
            <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>
            <div style={{ fontSize: "14px", marginTop: "8px", opacity: 0.7 }}>
              Vui l√≤ng ch·ªù trong gi√¢y l√°t
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div>
      <Header />

      {/* START BANNER */}
      <section className="lottery-banner">
        <div className="lottery-banner__container">
          <h1 className="lottery-banner__title">
            <span className="lottery-banner__title-line">K·∫æT QU·∫¢ QUAY S·ªê</span>
            <span className="lottery-banner__title-line">MAY M·∫ÆN</span>
          </h1>
          <div className="lottery-banner__sub">
            <div className="lottery-banner__subtitle">
              <span className="lottery-banner__subtitle-line">
                D·ª∞ ƒêO√ÅN ƒê·ªòI CHI·∫æN TH·∫ÆNG
              </span>
              <span className="lottery-banner__subtitle-line">CHUNG K·∫æT</span>
            </div>
            <img
              className="lottery-banner__logo"
              src={lcpIcon}
              alt="League of Legends Championship Pacific"
              width={499}
              height={196}
            />
          </div>
        </div>
        <div className="lottery-banner__marquee">
          <div className="lottery-banner__marquee-content">
            LEAGUE OF LEGENDS CHAMPIONSHIP PACIFIC &nbsp; S·∫¥N S√ÄNG ƒê∆Ø∆†NG ƒê·∫¶U
            &nbsp; LEAGUE OF LEGENDS CHAMPIONSHIP PACIFIC &nbsp; ÁÇ∫Ê≠§ËÄåÁîü &nbsp;
            LEAGUE OF LEGENDS CHAMPIONSHIP PACIFIC &nbsp; S·∫¥N S√ÄNG ƒê∆Ø∆†NG ƒê·∫¶U
            &nbsp; LEAGUE OF LEGENDS CHAMPIONSHIP PACIFIC &nbsp; ÁÇ∫Ê≠§ËÄåÁîü &nbsp;
          </div>
        </div>
      </section>
      {/* END BANNER */}

      {/* COUNTDOWN - Ch·ªâ hi·ªÉn th·ªã khi ch∆∞a h·∫øt th·ªùi gian */}
      {showCountdown && <Countdown onExpired={handleCountdownExpired} />}

      {/* START FIRST PRIZE SECTION */}
      <section className="first-prize">
        <div className="first-prize__container container">
          <div className="first-prize__header-image">
            <img src={groupPrize1} alt="1 Gi·∫£i Nh·∫•t" />
          </div>

          <div className="first-prize__board">
            <img
              className="first-prize__board-image"
              src={boardPrize2}
              alt="B·∫£ng k·∫øt qu·∫£"
            />

            <div className="first-prize__phone-overlay">
              {firstDigits.map((d, i) => (
                <span key={i} className="first-prize__digit">
                  {d === "X" ? "X" : d}
                </span>
              ))}
            </div>

            {firstWinner && (
              <div
                className="first-prize__name-overlay"
                title={firstWinner.full_name}
              >
                {firstWinner.full_name}
              </div>
            )}
          </div>
        </div>
      </section>
      {/* END FIRST PRIZE SECTION */}

      {/* START SECOND PRIZE SECTION */}
      <section className="second-prize">
        <div className="second-prize__container container">
          <div className="second-prize__header-image">
            <img src={groupPrize2} alt="3 Gi·∫£i Nh√¨" />
          </div>
          <div className="second-prize__boards">
            {secondDigits.map((row, idx) => (
              <div className="second-prize__board" key={idx}>
                <img
                  className="second-prize__board-image"
                  src={boardPrize2}
                  alt="B·∫£ng k·∫øt qu·∫£"
                />
                <div className="second-prize__phone-overlay">
                  {row.map((d, i) => (
                    <span key={i} className="second-prize__digit">
                      {d === "X" ? "X" : d}
                    </span>
                  ))}
                </div>
                {secondWinners[idx] && (
                  <div
                    className="second-prize__name-overlay"
                    title={secondWinners[idx].full_name}
                  >
                    {secondWinners[idx].full_name}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </section>
      {/* END SECOND PRIZE SECTION */}

      {/* START THIRD PRIZE SECTION */}
      <section className="third-prize">
        <div className="third-prize__container container">
          <div className="third-prize__header-image">
            <img src={groupPrize3} alt="300 Gi·∫£i Ba" />
          </div>

          <div className="third-prize__lookup-row">
            <div className="third-prize__lookup-search">
              <img
                src={lookupImage}
                alt="search"
                className="third-prize__lookup-icon"
              />
              <div className="third-prize__lookup-content">
                <div className="third-prize__lookup-label">
                  TRA C·ª®U S·ªê ƒêI·ªÜN THO·∫†I:
                </div>
                <div className="third-prize__lookup-input-row">
                  <input
                    className="third-prize__lookup-input"
                    placeholder="0123456789"
                    maxLength={10}
                    value={searchPhone}
                    onChange={(e) => setSearchPhone(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === "Enter") {
                        handleSearch();
                      }
                    }}
                  />
                  <button
                    className="third-prize__lookup-btn"
                    onClick={handleSearch}
                    disabled={isSearching}
                  >
                    {isSearching ? "ƒêANG TRA..." : "TRA C·ª®U"}
                  </button>
                </div>
              </div>
            </div>
            <div className="third-prize__lookup-result">
              {searchResult
                ? searchResult.message
                : "NH·∫¨P S·ªê ƒêI·ªÜN THO·∫†I ƒê·ªÇ TRA C·ª®U."}
            </div>
          </div>

          {/* ‚úÖ SEARCH RESULT - GI·∫¢I NH·∫§T (CH·ªà HI·ªÇN TH·ªä KHI SEARCH TR√öNG) */}
          {searchResult?.found && searchResult.winner?.prize_id === 1 && (
            <div className="backpack-prize search-first-prize">
              <div className="backpack-prize__title">
                {searchResult.winner.prize || "GI·∫¢I NH·∫§T"}
              </div>
              <div className="backpack-prize__table-wrap">
                <table className="backpack-prize__table">
                  <thead>
                    <tr>
                      <th>STT</th>
                      <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                      <th>H·ªå V√Ä T√äN</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="prize-table-row prize-table-row--visible">
                      <td>1</td>
                      <td>{searchResult.winner.number_phone}</td>
                      <td>{searchResult.winner.full_name}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* ‚úÖ SEARCH RESULT - GI·∫¢I NH√å (CH·ªà HI·ªÇN TH·ªä KHI SEARCH TR√öNG) */}
          {searchResult?.found && searchResult.winner?.prize_id === 2 && (
            <div className="backpack-prize search-second-prize">
              <div className="backpack-prize__title">
                {searchResult.winner.prize || "GI·∫¢I NH√å"}
              </div>
              <div className="backpack-prize__table-wrap">
                <table className="backpack-prize__table">
                  <thead>
                    <tr>
                      <th>STT</th>
                      <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                      <th>H·ªå V√Ä T√äN</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr className="prize-table-row prize-table-row--visible">
                      <td>1</td>
                      <td>{searchResult.winner.number_phone}</td>
                      <td>{searchResult.winner.full_name}</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* BALO DU L·ªäCH (prizeId = 3) */}
          <div className="backpack-prize">
            <div className="backpack-prize__title">BALO DU L·ªäCH</div>
            <div className="backpack-prize__table-wrap">
              <table className="backpack-prize__table">
                <thead>
                  <tr>
                    <th>STT</th>
                    <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                    <th>H·ªå V√Ä T√äN</th>
                  </tr>
                </thead>
                <tbody>
                  {backpackList.slice(0, backpackVisible).map((w, idx) => (
                    <tr
                      key={idx}
                      className={`prize-table-row ${
                        idx < backpackAnimatedRows
                          ? "prize-table-row--visible"
                          : "prize-table-row--hidden"
                      }`}
                    >
                      <td>{idx + 1}</td>
                      <td>{w.number_phone}</td>
                      <td>{w.full_name}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {backpackList.length > 10 && (
              <div
                className="backpack-prize__more"
                style={{
                  opacity: isAnimatingBackpack ? 0 : 1,
                  transition: "opacity 0.3s ease",
                }}
              >
                <button
                  className="backpack-prize__more-btn"
                  onClick={handleToggleBackpack}
                  disabled={isAnimatingBackpack}
                >
                  {isBackpackExpanded ? "THU G·ªåN" : "XEM TH√äM"}
                </button>
              </div>
            )}
          </div>

          {/* B√åNH N∆Ø·ªöC G·∫§U OH-BEAR TINH NGH·ªäCH (prizeId = 4) */}
          <div className="backpack-prize bottle-prize">
            <div className="backpack-prize__title">
              B√åNH N∆Ø·ªöC G·∫§U OH-BEAR TINH NGH·ªäCH
            </div>
            <div className="bottle-prize__table-wrap">
              <table className="backpack-prize__table">
                <thead>
                  <tr>
                    <th>STT</th>
                    <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                    <th>H·ªå V√Ä T√äN</th>
                  </tr>
                </thead>
                <tbody>
                  {bottleList.slice(0, bottleVisible).map((w, idx) => (
                    <tr
                      key={idx}
                      className={`prize-table-row ${
                        idx < bottleAnimatedRows
                          ? "prize-table-row--visible"
                          : "prize-table-row--hidden"
                      }`}
                    >
                      <td>{idx + 1}</td>
                      <td>{w.number_phone}</td>
                      <td>{w.full_name}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {bottleList.length > 10 && (
              <div
                className="backpack-prize__more"
                style={{
                  opacity: isAnimatingBottle ? 0 : 1,
                  transition: "opacity 0.3s ease",
                }}
              >
                <button
                  className="backpack-prize__more-btn"
                  onClick={handleToggleBottle}
                >
                  {isBottleExpanded ? "THU G·ªåN" : "XEM TH√äM"}
                </button>
              </div>
            )}
          </div>

          {/* T√öI X·∫æP TI·ªÜN L·ª¢I (prizeId = 5) */}
          <div className="backpack-prize bag-prize">
            <div className="backpack-prize__title">T√öI X·∫æP TI·ªÜN L·ª¢I</div>
            <div className="bag-prize__table-wrap">
              <table className="backpack-prize__table">
                <thead>
                  <tr>
                    <th>STT</th>
                    <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                    <th>H·ªå V√Ä T√äN</th>
                  </tr>
                </thead>
                <tbody>
                  {bagList.slice(0, bagVisible).map((w, idx) => (
                    <tr
                      key={idx}
                      className={`prize-table-row ${
                        idx < bagAnimatedRows
                          ? "prize-table-row--visible"
                          : "prize-table-row--hidden"
                      }`}
                    >
                      <td>{idx + 1}</td>
                      <td>{w.number_phone}</td>
                      <td>{w.full_name}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {bagList.length > 10 && (
              <div
                className="backpack-prize__more"
                style={{
                  opacity: isAnimatingBag ? 0 : 1,
                  transition: "opacity 0.3s ease",
                }}
              >
                <button
                  className="backpack-prize__more-btn"
                  onClick={handleToggleBag}
                >
                  {isBagExpanded ? "THU G·ªåN" : "XEM TH√äM"}
                </button>
              </div>
            )}
          </div>
        </div>
      </section>
      {/* END THIRD PRIZE SECTION */}
    </div>
  );
};

export default Lottery;
